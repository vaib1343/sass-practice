@use 'sass:math';

$grid-column: 13;
$grid-gap: (
    '0': 0,
    '1': 10px,
    '2': 20px,
    '3': 30px,
    '4': 40px,
);

$layout-values: flex-start, flex-end, center, space-between, space-evenly, space-around;

// base layout classes

.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

//grid gap

@each $key, $val in $grid-gap {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
    }
}

// justify content

@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}

// col classes

@include xs {
    @for $i from 1 to $grid-column {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include sm {
    @for $i from 1 to $grid-column {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}
@include md {
    @for $i from 1 to $grid-column {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include lg {
    @for $i from 1 to $grid-column {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}

@include xl {
    @for $i from 1 to $grid-column {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, $grid-column);
        }
    }
}
